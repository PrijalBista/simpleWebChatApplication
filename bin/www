#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

let groups = [];

io.sockets.on('connection', function(socket){
  // console.log('a user connected ID: '+ socket.id);
  
  socket.once('disconnect', function(){
    // console.log('user disconnected');
    
    let index = groups.findIndex(obj => obj.members.includes(socket.id));
    if(index == -1){     
      socket.broadcast.emit('chat event', "A user disconnected");
    
      setTimeout(function(){
        socket.broadcast.emit('chat event', "");       
      },1500);
    
    }else { // socket belongs to the group

      let member_index = groups[index].members.indexOf(socket.id);
      groups[index].members.splice(member_index,1);

      // check if room exists in socket adaptar (socket adapter manages the room info )
      let room = io.sockets.adapter.rooms[groups[index].group_name];
      
      //everyone in the room already left (room empty ) then remove chat room from groups as well
      if ( !room || room.length <= 0 ) groups.splice(index,1);

      // console.log("EXISTING GROUPS \n",JSON.stringify(groups));

    }
  });

  socket.on('chat message', function(msg){
    // console.log('message: ' + msg);
    io.emit('chat message', msg);
  });

  socket.on('chat event',function(msg){
    // console.log(msg);
    socket.broadcast.emit('chat event',msg);
  });

  socket.on('create room',function(msgobj){
    //check if the group_name already exists
    let index = groups.findIndex(obj => obj.group_name == msgobj.group_name );
    if(index != -1) {
     //return msg that group already exists
      socket.emit('chat room err',{status:false, msg: 'room already exists(try another room name)'});
      return; 
    }
    //group doesnt exist so creating one
    groups.push({
      ... msgobj,
      members: [socket.id]
    });

    socket.join(msgobj.group_name, ()=>{

      socket.emit('chat room err',{status:true, msg: 'room successully created'});
      socket.to(msgobj).emit('chat room event','A new user joined the room');
    });

  });
  socket.on('join room', function(msgobj){

    //check if the group_name exists
    let index = groups.findIndex(obj => obj.group_name == msgobj.group_name && obj.password == msgobj.password);
    if(index == -1){
      //group doesn't exist i.e either groupname or password is wrong
      socket.emit('chat room err',{status:false, msg: 'either room name or password is wrong'});
      return;
    }

    //group name exists and its id is index
    groups[index].members.push(socket.id);
    
    socket.join(msgobj.group_name, ()=>{
      socket.to(msgobj).emit('chat room event','A new user joined the room');

    });

   });

  socket.on('chat room message',function(msgobj){

    //check if the group_name already exists

    let index = groups.findIndex(obj => obj.group_name == msgobj.group_name && obj.password == msgobj.password);
    if(index == -1) return;

    io.to(msgobj.group_name).emit('chat room message', msgobj.message);

  });

  socket.on('chat room event',function(msgobj){
    //send info about user events to every other sockets except the one sending it

    socket.to(msgobj.group_name).emit('chat room event',msgobj.message);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
